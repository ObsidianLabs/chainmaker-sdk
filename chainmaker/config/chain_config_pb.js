// source: config/chain_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var consensus_consensus_pb = require('../consensus/consensus_pb.js');
goog.object.extend(proto, consensus_consensus_pb);
var common_request_pb = require('../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
var accesscontrol_policy_pb = require('../accesscontrol/policy_pb.js');
goog.object.extend(proto, accesscontrol_policy_pb);
goog.exportSymbol('proto.config.BlockConfig', null, global);
goog.exportSymbol('proto.config.ChainConfig', null, global);
goog.exportSymbol('proto.config.ConsensusConfig', null, global);
goog.exportSymbol('proto.config.ContextConfig', null, global);
goog.exportSymbol('proto.config.ContractConfig', null, global);
goog.exportSymbol('proto.config.CoreConfig', null, global);
goog.exportSymbol('proto.config.CryptoConfig', null, global);
goog.exportSymbol('proto.config.OrgConfig', null, global);
goog.exportSymbol('proto.config.ResourcePolicy', null, global);
goog.exportSymbol('proto.config.SchedulerConfig', null, global);
goog.exportSymbol('proto.config.SnapshotConfig', null, global);
goog.exportSymbol('proto.config.TrustMemberConfig', null, global);
goog.exportSymbol('proto.config.TrustRootConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ChainConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.config.ChainConfig.repeatedFields_, null);
};
goog.inherits(proto.config.ChainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ChainConfig.displayName = 'proto.config.ChainConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ResourcePolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.ResourcePolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ResourcePolicy.displayName = 'proto.config.ResourcePolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.CryptoConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.CryptoConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.CryptoConfig.displayName = 'proto.config.CryptoConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.BlockConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.BlockConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.BlockConfig.displayName = 'proto.config.BlockConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.SchedulerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.SchedulerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.SchedulerConfig.displayName = 'proto.config.SchedulerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.SnapshotConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.SnapshotConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.SnapshotConfig.displayName = 'proto.config.SnapshotConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ContextConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.ContextConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ContextConfig.displayName = 'proto.config.ContextConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.CoreConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.CoreConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.CoreConfig.displayName = 'proto.config.CoreConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ConsensusConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.config.ConsensusConfig.repeatedFields_, null);
};
goog.inherits(proto.config.ConsensusConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ConsensusConfig.displayName = 'proto.config.ConsensusConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.OrgConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.config.OrgConfig.repeatedFields_, null);
};
goog.inherits(proto.config.OrgConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.OrgConfig.displayName = 'proto.config.OrgConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.TrustRootConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.config.TrustRootConfig.repeatedFields_, null);
};
goog.inherits(proto.config.TrustRootConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.TrustRootConfig.displayName = 'proto.config.TrustRootConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.ContractConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.config.ContractConfig.repeatedFields_, null);
};
goog.inherits(proto.config.ContractConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.ContractConfig.displayName = 'proto.config.ContractConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.config.TrustMemberConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.config.TrustMemberConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.config.TrustMemberConfig.displayName = 'proto.config.TrustMemberConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.ChainConfig.repeatedFields_ = [9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.ChainConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.ChainConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.ChainConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ChainConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    memberType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    crypto: (f = msg.getCrypto()) && proto.config.CryptoConfig.toObject(includeInstance, f),
    block: (f = msg.getBlock()) && proto.config.BlockConfig.toObject(includeInstance, f),
    core: (f = msg.getCore()) && proto.config.CoreConfig.toObject(includeInstance, f),
    consensus: (f = msg.getConsensus()) && proto.config.ConsensusConfig.toObject(includeInstance, f),
    trustRootsList: jspb.Message.toObjectList(msg.getTrustRootsList(),
    proto.config.TrustRootConfig.toObject, includeInstance),
    trustMembersList: jspb.Message.toObjectList(msg.getTrustMembersList(),
    proto.config.TrustMemberConfig.toObject, includeInstance),
    resourcePoliciesList: jspb.Message.toObjectList(msg.getResourcePoliciesList(),
    proto.config.ResourcePolicy.toObject, includeInstance),
    contract: (f = msg.getContract()) && proto.config.ContractConfig.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.config.SnapshotConfig.toObject(includeInstance, f),
    scheduler: (f = msg.getScheduler()) && proto.config.SchedulerConfig.toObject(includeInstance, f),
    context: (f = msg.getContext()) && proto.config.ContextConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ChainConfig}
 */
proto.config.ChainConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ChainConfig;
  return proto.config.ChainConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ChainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ChainConfig}
 */
proto.config.ChainConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 5:
      var value = new proto.config.CryptoConfig;
      reader.readMessage(value,proto.config.CryptoConfig.deserializeBinaryFromReader);
      msg.setCrypto(value);
      break;
    case 6:
      var value = new proto.config.BlockConfig;
      reader.readMessage(value,proto.config.BlockConfig.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 7:
      var value = new proto.config.CoreConfig;
      reader.readMessage(value,proto.config.CoreConfig.deserializeBinaryFromReader);
      msg.setCore(value);
      break;
    case 8:
      var value = new proto.config.ConsensusConfig;
      reader.readMessage(value,proto.config.ConsensusConfig.deserializeBinaryFromReader);
      msg.setConsensus(value);
      break;
    case 9:
      var value = new proto.config.TrustRootConfig;
      reader.readMessage(value,proto.config.TrustRootConfig.deserializeBinaryFromReader);
      msg.addTrustRoots(value);
      break;
    case 10:
      var value = new proto.config.TrustMemberConfig;
      reader.readMessage(value,proto.config.TrustMemberConfig.deserializeBinaryFromReader);
      msg.addTrustMembers(value);
      break;
    case 11:
      var value = new proto.config.ResourcePolicy;
      reader.readMessage(value,proto.config.ResourcePolicy.deserializeBinaryFromReader);
      msg.addResourcePolicies(value);
      break;
    case 12:
      var value = new proto.config.ContractConfig;
      reader.readMessage(value,proto.config.ContractConfig.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 13:
      var value = new proto.config.SnapshotConfig;
      reader.readMessage(value,proto.config.SnapshotConfig.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 14:
      var value = new proto.config.SchedulerConfig;
      reader.readMessage(value,proto.config.SchedulerConfig.deserializeBinaryFromReader);
      msg.setScheduler(value);
      break;
    case 15:
      var value = new proto.config.ContextConfig;
      reader.readMessage(value,proto.config.ContextConfig.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ChainConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.ChainConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ChainConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ChainConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMemberType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCrypto();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.config.CryptoConfig.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.config.BlockConfig.serializeBinaryToWriter
    );
  }
  f = message.getCore();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.config.CoreConfig.serializeBinaryToWriter
    );
  }
  f = message.getConsensus();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.config.ConsensusConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrustRootsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.config.TrustRootConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrustMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.config.TrustMemberConfig.serializeBinaryToWriter
    );
  }
  f = message.getResourcePoliciesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.config.ResourcePolicy.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.config.ContractConfig.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.config.SnapshotConfig.serializeBinaryToWriter
    );
  }
  f = message.getScheduler();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.config.SchedulerConfig.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.config.ContextConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.config.ChainConfig.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.config.ChainConfig.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string member_type = 3;
 * @return {string}
 */
proto.config.ChainConfig.prototype.getMemberType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.setMemberType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 sequence = 4;
 * @return {number}
 */
proto.config.ChainConfig.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CryptoConfig crypto = 5;
 * @return {?proto.config.CryptoConfig}
 */
proto.config.ChainConfig.prototype.getCrypto = function() {
  return /** @type{?proto.config.CryptoConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.CryptoConfig, 5));
};


/**
 * @param {?proto.config.CryptoConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setCrypto = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearCrypto = function() {
  return this.setCrypto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasCrypto = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BlockConfig block = 6;
 * @return {?proto.config.BlockConfig}
 */
proto.config.ChainConfig.prototype.getBlock = function() {
  return /** @type{?proto.config.BlockConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.BlockConfig, 6));
};


/**
 * @param {?proto.config.BlockConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CoreConfig core = 7;
 * @return {?proto.config.CoreConfig}
 */
proto.config.ChainConfig.prototype.getCore = function() {
  return /** @type{?proto.config.CoreConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.CoreConfig, 7));
};


/**
 * @param {?proto.config.CoreConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setCore = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearCore = function() {
  return this.setCore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasCore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ConsensusConfig consensus = 8;
 * @return {?proto.config.ConsensusConfig}
 */
proto.config.ChainConfig.prototype.getConsensus = function() {
  return /** @type{?proto.config.ConsensusConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.ConsensusConfig, 8));
};


/**
 * @param {?proto.config.ConsensusConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setConsensus = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearConsensus = function() {
  return this.setConsensus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasConsensus = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated TrustRootConfig trust_roots = 9;
 * @return {!Array<!proto.config.TrustRootConfig>}
 */
proto.config.ChainConfig.prototype.getTrustRootsList = function() {
  return /** @type{!Array<!proto.config.TrustRootConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.config.TrustRootConfig, 9));
};


/**
 * @param {!Array<!proto.config.TrustRootConfig>} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setTrustRootsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.config.TrustRootConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.config.TrustRootConfig}
 */
proto.config.ChainConfig.prototype.addTrustRoots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.config.TrustRootConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearTrustRootsList = function() {
  return this.setTrustRootsList([]);
};


/**
 * repeated TrustMemberConfig trust_members = 10;
 * @return {!Array<!proto.config.TrustMemberConfig>}
 */
proto.config.ChainConfig.prototype.getTrustMembersList = function() {
  return /** @type{!Array<!proto.config.TrustMemberConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.config.TrustMemberConfig, 10));
};


/**
 * @param {!Array<!proto.config.TrustMemberConfig>} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setTrustMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.config.TrustMemberConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.config.TrustMemberConfig}
 */
proto.config.ChainConfig.prototype.addTrustMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.config.TrustMemberConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearTrustMembersList = function() {
  return this.setTrustMembersList([]);
};


/**
 * repeated ResourcePolicy resource_policies = 11;
 * @return {!Array<!proto.config.ResourcePolicy>}
 */
proto.config.ChainConfig.prototype.getResourcePoliciesList = function() {
  return /** @type{!Array<!proto.config.ResourcePolicy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.config.ResourcePolicy, 11));
};


/**
 * @param {!Array<!proto.config.ResourcePolicy>} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setResourcePoliciesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.config.ResourcePolicy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.config.ResourcePolicy}
 */
proto.config.ChainConfig.prototype.addResourcePolicies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.config.ResourcePolicy, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearResourcePoliciesList = function() {
  return this.setResourcePoliciesList([]);
};


/**
 * optional ContractConfig contract = 12;
 * @return {?proto.config.ContractConfig}
 */
proto.config.ChainConfig.prototype.getContract = function() {
  return /** @type{?proto.config.ContractConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.ContractConfig, 12));
};


/**
 * @param {?proto.config.ContractConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setContract = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearContract = function() {
  return this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasContract = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SnapshotConfig snapshot = 13;
 * @return {?proto.config.SnapshotConfig}
 */
proto.config.ChainConfig.prototype.getSnapshot = function() {
  return /** @type{?proto.config.SnapshotConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.SnapshotConfig, 13));
};


/**
 * @param {?proto.config.SnapshotConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SchedulerConfig scheduler = 14;
 * @return {?proto.config.SchedulerConfig}
 */
proto.config.ChainConfig.prototype.getScheduler = function() {
  return /** @type{?proto.config.SchedulerConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.SchedulerConfig, 14));
};


/**
 * @param {?proto.config.SchedulerConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearScheduler = function() {
  return this.setScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasScheduler = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ContextConfig context = 15;
 * @return {?proto.config.ContextConfig}
 */
proto.config.ChainConfig.prototype.getContext = function() {
  return /** @type{?proto.config.ContextConfig} */ (
    jspb.Message.getWrapperField(this, proto.config.ContextConfig, 15));
};


/**
 * @param {?proto.config.ContextConfig|undefined} value
 * @return {!proto.config.ChainConfig} returns this
*/
proto.config.ChainConfig.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ChainConfig} returns this
 */
proto.config.ChainConfig.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ChainConfig.prototype.hasContext = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.ResourcePolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.config.ResourcePolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.ResourcePolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ResourcePolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    policy: (f = msg.getPolicy()) && accesscontrol_policy_pb.Policy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ResourcePolicy}
 */
proto.config.ResourcePolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ResourcePolicy;
  return proto.config.ResourcePolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ResourcePolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ResourcePolicy}
 */
proto.config.ResourcePolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceName(value);
      break;
    case 2:
      var value = new accesscontrol_policy_pb.Policy;
      reader.readMessage(value,accesscontrol_policy_pb.Policy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ResourcePolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.ResourcePolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ResourcePolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ResourcePolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      accesscontrol_policy_pb.Policy.serializeBinaryToWriter
    );
  }
};


/**
 * optional string resource_name = 1;
 * @return {string}
 */
proto.config.ResourcePolicy.prototype.getResourceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.ResourcePolicy} returns this
 */
proto.config.ResourcePolicy.prototype.setResourceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional accesscontrol.Policy policy = 2;
 * @return {?proto.accesscontrol.Policy}
 */
proto.config.ResourcePolicy.prototype.getPolicy = function() {
  return /** @type{?proto.accesscontrol.Policy} */ (
    jspb.Message.getWrapperField(this, accesscontrol_policy_pb.Policy, 2));
};


/**
 * @param {?proto.accesscontrol.Policy|undefined} value
 * @return {!proto.config.ResourcePolicy} returns this
*/
proto.config.ResourcePolicy.prototype.setPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.config.ResourcePolicy} returns this
 */
proto.config.ResourcePolicy.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.config.ResourcePolicy.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.CryptoConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.CryptoConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.CryptoConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.CryptoConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.CryptoConfig}
 */
proto.config.CryptoConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.CryptoConfig;
  return proto.config.CryptoConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.CryptoConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.CryptoConfig}
 */
proto.config.CryptoConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.CryptoConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.CryptoConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.CryptoConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.CryptoConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.config.CryptoConfig.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.CryptoConfig} returns this
 */
proto.config.CryptoConfig.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.BlockConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.BlockConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.BlockConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.BlockConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    txTimestampVerify: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    txTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockTxCapacity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockInterval: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.BlockConfig}
 */
proto.config.BlockConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.BlockConfig;
  return proto.config.BlockConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.BlockConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.BlockConfig}
 */
proto.config.BlockConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTxTimestampVerify(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxTimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockTxCapacity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.BlockConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.BlockConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.BlockConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.BlockConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxTimestampVerify();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTxTimeout();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlockTxCapacity();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBlockSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockInterval();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bool tx_timestamp_verify = 1;
 * @return {boolean}
 */
proto.config.BlockConfig.prototype.getTxTimestampVerify = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.config.BlockConfig} returns this
 */
proto.config.BlockConfig.prototype.setTxTimestampVerify = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 tx_timeout = 2;
 * @return {number}
 */
proto.config.BlockConfig.prototype.getTxTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.BlockConfig} returns this
 */
proto.config.BlockConfig.prototype.setTxTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 block_tx_capacity = 3;
 * @return {number}
 */
proto.config.BlockConfig.prototype.getBlockTxCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.BlockConfig} returns this
 */
proto.config.BlockConfig.prototype.setBlockTxCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 block_size = 4;
 * @return {number}
 */
proto.config.BlockConfig.prototype.getBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.BlockConfig} returns this
 */
proto.config.BlockConfig.prototype.setBlockSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 block_interval = 5;
 * @return {number}
 */
proto.config.BlockConfig.prototype.getBlockInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.BlockConfig} returns this
 */
proto.config.BlockConfig.prototype.setBlockInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.SchedulerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.SchedulerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.SchedulerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SchedulerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableEvidence: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.SchedulerConfig}
 */
proto.config.SchedulerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.SchedulerConfig;
  return proto.config.SchedulerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.SchedulerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.SchedulerConfig}
 */
proto.config.SchedulerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableEvidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.SchedulerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.SchedulerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.SchedulerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SchedulerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableEvidence();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_evidence = 1;
 * @return {boolean}
 */
proto.config.SchedulerConfig.prototype.getEnableEvidence = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.config.SchedulerConfig} returns this
 */
proto.config.SchedulerConfig.prototype.setEnableEvidence = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.SnapshotConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.SnapshotConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.SnapshotConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SnapshotConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableEvidence: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.SnapshotConfig}
 */
proto.config.SnapshotConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.SnapshotConfig;
  return proto.config.SnapshotConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.SnapshotConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.SnapshotConfig}
 */
proto.config.SnapshotConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableEvidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.SnapshotConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.SnapshotConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.SnapshotConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.SnapshotConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableEvidence();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_evidence = 1;
 * @return {boolean}
 */
proto.config.SnapshotConfig.prototype.getEnableEvidence = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.config.SnapshotConfig} returns this
 */
proto.config.SnapshotConfig.prototype.setEnableEvidence = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.ContextConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.ContextConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.ContextConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ContextConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableEvidence: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ContextConfig}
 */
proto.config.ContextConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ContextConfig;
  return proto.config.ContextConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ContextConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ContextConfig}
 */
proto.config.ContextConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableEvidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ContextConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.ContextConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ContextConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ContextConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableEvidence();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_evidence = 1;
 * @return {boolean}
 */
proto.config.ContextConfig.prototype.getEnableEvidence = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.config.ContextConfig} returns this
 */
proto.config.ContextConfig.prototype.setEnableEvidence = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.CoreConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.CoreConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.CoreConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.CoreConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    txSchedulerTimeout: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txSchedulerValidateTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.CoreConfig}
 */
proto.config.CoreConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.CoreConfig;
  return proto.config.CoreConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.CoreConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.CoreConfig}
 */
proto.config.CoreConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxSchedulerTimeout(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxSchedulerValidateTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.CoreConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.CoreConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.CoreConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.CoreConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxSchedulerTimeout();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxSchedulerValidateTimeout();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 tx_scheduler_timeout = 1;
 * @return {number}
 */
proto.config.CoreConfig.prototype.getTxSchedulerTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.CoreConfig} returns this
 */
proto.config.CoreConfig.prototype.setTxSchedulerTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 tx_scheduler_validate_timeout = 2;
 * @return {number}
 */
proto.config.CoreConfig.prototype.getTxSchedulerValidateTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.config.CoreConfig} returns this
 */
proto.config.CoreConfig.prototype.setTxSchedulerValidateTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.ConsensusConfig.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.ConsensusConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.ConsensusConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.ConsensusConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ConsensusConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.config.OrgConfig.toObject, includeInstance),
    extConfigList: jspb.Message.toObjectList(msg.getExtConfigList(),
    common_request_pb.KeyValuePair.toObject, includeInstance),
    dposConfigList: jspb.Message.toObjectList(msg.getDposConfigList(),
    common_request_pb.KeyValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ConsensusConfig}
 */
proto.config.ConsensusConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ConsensusConfig;
  return proto.config.ConsensusConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ConsensusConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ConsensusConfig}
 */
proto.config.ConsensusConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.consensus.ConsensusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.config.OrgConfig;
      reader.readMessage(value,proto.config.OrgConfig.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 3:
      var value = new common_request_pb.KeyValuePair;
      reader.readMessage(value,common_request_pb.KeyValuePair.deserializeBinaryFromReader);
      msg.addExtConfig(value);
      break;
    case 4:
      var value = new common_request_pb.KeyValuePair;
      reader.readMessage(value,common_request_pb.KeyValuePair.deserializeBinaryFromReader);
      msg.addDposConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ConsensusConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.ConsensusConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ConsensusConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ConsensusConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.config.OrgConfig.serializeBinaryToWriter
    );
  }
  f = message.getExtConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_request_pb.KeyValuePair.serializeBinaryToWriter
    );
  }
  f = message.getDposConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_request_pb.KeyValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional consensus.ConsensusType type = 1;
 * @return {!proto.consensus.ConsensusType}
 */
proto.config.ConsensusConfig.prototype.getType = function() {
  return /** @type {!proto.consensus.ConsensusType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.consensus.ConsensusType} value
 * @return {!proto.config.ConsensusConfig} returns this
 */
proto.config.ConsensusConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated OrgConfig nodes = 2;
 * @return {!Array<!proto.config.OrgConfig>}
 */
proto.config.ConsensusConfig.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.config.OrgConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.config.OrgConfig, 2));
};


/**
 * @param {!Array<!proto.config.OrgConfig>} value
 * @return {!proto.config.ConsensusConfig} returns this
*/
proto.config.ConsensusConfig.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.config.OrgConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.config.OrgConfig}
 */
proto.config.ConsensusConfig.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.config.OrgConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ConsensusConfig} returns this
 */
proto.config.ConsensusConfig.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated common.KeyValuePair ext_config = 3;
 * @return {!Array<!proto.common.KeyValuePair>}
 */
proto.config.ConsensusConfig.prototype.getExtConfigList = function() {
  return /** @type{!Array<!proto.common.KeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_request_pb.KeyValuePair, 3));
};


/**
 * @param {!Array<!proto.common.KeyValuePair>} value
 * @return {!proto.config.ConsensusConfig} returns this
*/
proto.config.ConsensusConfig.prototype.setExtConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.KeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.KeyValuePair}
 */
proto.config.ConsensusConfig.prototype.addExtConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.KeyValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ConsensusConfig} returns this
 */
proto.config.ConsensusConfig.prototype.clearExtConfigList = function() {
  return this.setExtConfigList([]);
};


/**
 * repeated common.KeyValuePair dpos_config = 4;
 * @return {!Array<!proto.common.KeyValuePair>}
 */
proto.config.ConsensusConfig.prototype.getDposConfigList = function() {
  return /** @type{!Array<!proto.common.KeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_request_pb.KeyValuePair, 4));
};


/**
 * @param {!Array<!proto.common.KeyValuePair>} value
 * @return {!proto.config.ConsensusConfig} returns this
*/
proto.config.ConsensusConfig.prototype.setDposConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.common.KeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.KeyValuePair}
 */
proto.config.ConsensusConfig.prototype.addDposConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.common.KeyValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ConsensusConfig} returns this
 */
proto.config.ConsensusConfig.prototype.clearDposConfigList = function() {
  return this.setDposConfigList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.OrgConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.OrgConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.OrgConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.OrgConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.OrgConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    orgId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    nodeIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.OrgConfig}
 */
proto.config.OrgConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.OrgConfig;
  return proto.config.OrgConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.OrgConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.OrgConfig}
 */
proto.config.OrgConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.OrgConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.OrgConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.OrgConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.OrgConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrgId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getNodeIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string org_id = 1;
 * @return {string}
 */
proto.config.OrgConfig.prototype.getOrgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.setOrgId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string address = 2;
 * @return {!Array<string>}
 */
proto.config.OrgConfig.prototype.getAddressList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.setAddressList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.addAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.clearAddressList = function() {
  return this.setAddressList([]);
};


/**
 * repeated string node_id = 3;
 * @return {!Array<string>}
 */
proto.config.OrgConfig.prototype.getNodeIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.setNodeIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.addNodeId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.OrgConfig} returns this
 */
proto.config.OrgConfig.prototype.clearNodeIdList = function() {
  return this.setNodeIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.TrustRootConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.TrustRootConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.TrustRootConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.TrustRootConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.TrustRootConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    orgId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.TrustRootConfig}
 */
proto.config.TrustRootConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.TrustRootConfig;
  return proto.config.TrustRootConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.TrustRootConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.TrustRootConfig}
 */
proto.config.TrustRootConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.TrustRootConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.TrustRootConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.TrustRootConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.TrustRootConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrgId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string org_id = 1;
 * @return {string}
 */
proto.config.TrustRootConfig.prototype.getOrgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.TrustRootConfig} returns this
 */
proto.config.TrustRootConfig.prototype.setOrgId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string root = 2;
 * @return {!Array<string>}
 */
proto.config.TrustRootConfig.prototype.getRootList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.config.TrustRootConfig} returns this
 */
proto.config.TrustRootConfig.prototype.setRootList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.TrustRootConfig} returns this
 */
proto.config.TrustRootConfig.prototype.addRoot = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.TrustRootConfig} returns this
 */
proto.config.TrustRootConfig.prototype.clearRootList = function() {
  return this.setRootList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.config.ContractConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.ContractConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.ContractConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.ContractConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ContractConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableSqlSupport: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    disabledNativeContractList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.ContractConfig}
 */
proto.config.ContractConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.ContractConfig;
  return proto.config.ContractConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.ContractConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.ContractConfig}
 */
proto.config.ContractConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSqlSupport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDisabledNativeContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.ContractConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.ContractConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.ContractConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.ContractConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableSqlSupport();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisabledNativeContractList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool enable_sql_support = 1;
 * @return {boolean}
 */
proto.config.ContractConfig.prototype.getEnableSqlSupport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.config.ContractConfig} returns this
 */
proto.config.ContractConfig.prototype.setEnableSqlSupport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string disabled_native_contract = 2;
 * @return {!Array<string>}
 */
proto.config.ContractConfig.prototype.getDisabledNativeContractList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.config.ContractConfig} returns this
 */
proto.config.ContractConfig.prototype.setDisabledNativeContractList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.config.ContractConfig} returns this
 */
proto.config.ContractConfig.prototype.addDisabledNativeContract = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.config.ContractConfig} returns this
 */
proto.config.ContractConfig.prototype.clearDisabledNativeContractList = function() {
  return this.setDisabledNativeContractList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.config.TrustMemberConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.config.TrustMemberConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.config.TrustMemberConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.TrustMemberConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberInfo: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orgId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nodeId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.config.TrustMemberConfig}
 */
proto.config.TrustMemberConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.config.TrustMemberConfig;
  return proto.config.TrustMemberConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.config.TrustMemberConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.config.TrustMemberConfig}
 */
proto.config.TrustMemberConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.config.TrustMemberConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.config.TrustMemberConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.config.TrustMemberConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.config.TrustMemberConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberInfo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrgId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string member_info = 1;
 * @return {string}
 */
proto.config.TrustMemberConfig.prototype.getMemberInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.TrustMemberConfig} returns this
 */
proto.config.TrustMemberConfig.prototype.setMemberInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string org_id = 2;
 * @return {string}
 */
proto.config.TrustMemberConfig.prototype.getOrgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.TrustMemberConfig} returns this
 */
proto.config.TrustMemberConfig.prototype.setOrgId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string role = 3;
 * @return {string}
 */
proto.config.TrustMemberConfig.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.TrustMemberConfig} returns this
 */
proto.config.TrustMemberConfig.prototype.setRole = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string node_id = 4;
 * @return {string}
 */
proto.config.TrustMemberConfig.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.config.TrustMemberConfig} returns this
 */
proto.config.TrustMemberConfig.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.config);
