// source: common/contract.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var accesscontrol_member_pb = require('../accesscontrol/member_pb.js');
goog.object.extend(proto, accesscontrol_member_pb);
var accesscontrol_policy_pb = require('../accesscontrol/policy_pb.js');
goog.object.extend(proto, accesscontrol_policy_pb);
goog.exportSymbol('proto.common.CertManageFunction', null, global);
goog.exportSymbol('proto.common.ConfigFunction', null, global);
goog.exportSymbol('proto.common.Contract', null, global);
goog.exportSymbol('proto.common.ContractId', null, global);
goog.exportSymbol('proto.common.ContractInfo', null, global);
goog.exportSymbol('proto.common.ContractList', null, global);
goog.exportSymbol('proto.common.ContractName', null, global);
goog.exportSymbol('proto.common.ContractStatus', null, global);
goog.exportSymbol('proto.common.ContractTransaction', null, global);
goog.exportSymbol('proto.common.ContractType', null, global);
goog.exportSymbol('proto.common.ManageUserContractFunction', null, global);
goog.exportSymbol('proto.common.MultiSignFunction', null, global);
goog.exportSymbol('proto.common.PrivateComputeContractFunction', null, global);
goog.exportSymbol('proto.common.QueryFunction', null, global);
goog.exportSymbol('proto.common.RuntimeType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ContractId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractId.displayName = 'proto.common.ContractId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractInfo.repeatedFields_, null);
};
goog.inherits(proto.common.ContractInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractInfo.displayName = 'proto.common.ContractInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ContractTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractTransaction.displayName = 'proto.common.ContractTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Contract.displayName = 'proto.common.Contract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractList.repeatedFields_, null);
};
goog.inherits(proto.common.ContractList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractList.displayName = 'proto.common.ContractList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractId.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractId.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    runtimeType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractId}
 */
proto.common.ContractId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractId;
  return proto.common.ContractId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractId}
 */
proto.common.ContractId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.common.RuntimeType} */ (reader.readEnum());
      msg.setRuntimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRuntimeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string contract_name = 1;
 * @return {string}
 */
proto.common.ContractId.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractId} returns this
 */
proto.common.ContractId.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract_version = 2;
 * @return {string}
 */
proto.common.ContractId.prototype.getContractVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractId} returns this
 */
proto.common.ContractId.prototype.setContractVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RuntimeType runtime_type = 3;
 * @return {!proto.common.RuntimeType}
 */
proto.common.ContractId.prototype.getRuntimeType = function() {
  return /** @type {!proto.common.RuntimeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.common.RuntimeType} value
 * @return {!proto.common.ContractId} returns this
 */
proto.common.ContractId.prototype.setRuntimeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractTransactionList: jspb.Message.toObjectList(msg.getContractTransactionList(),
    proto.common.ContractTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractInfo}
 */
proto.common.ContractInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractInfo;
  return proto.common.ContractInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractInfo}
 */
proto.common.ContractInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.ContractTransaction;
      reader.readMessage(value,proto.common.ContractTransaction.deserializeBinaryFromReader);
      msg.addContractTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractTransactionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.ContractTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContractTransaction contract_transaction = 1;
 * @return {!Array<!proto.common.ContractTransaction>}
 */
proto.common.ContractInfo.prototype.getContractTransactionList = function() {
  return /** @type{!Array<!proto.common.ContractTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.ContractTransaction, 1));
};


/**
 * @param {!Array<!proto.common.ContractTransaction>} value
 * @return {!proto.common.ContractInfo} returns this
*/
proto.common.ContractInfo.prototype.setContractTransactionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.ContractTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.ContractTransaction}
 */
proto.common.ContractInfo.prototype.addContractTransaction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.ContractTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractInfo} returns this
 */
proto.common.ContractInfo.prototype.clearContractTransactionList = function() {
  return this.setContractTransactionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: (f = msg.getContractId()) && proto.common.ContractId.toObject(includeInstance, f),
    txId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractTransaction}
 */
proto.common.ContractTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractTransaction;
  return proto.common.ContractTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractTransaction}
 */
proto.common.ContractTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.ContractId;
      reader.readMessage(value,proto.common.ContractId.deserializeBinaryFromReader);
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.ContractId.serializeBinaryToWriter
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ContractId contract_id = 1;
 * @return {?proto.common.ContractId}
 */
proto.common.ContractTransaction.prototype.getContractId = function() {
  return /** @type{?proto.common.ContractId} */ (
    jspb.Message.getWrapperField(this, proto.common.ContractId, 1));
};


/**
 * @param {?proto.common.ContractId|undefined} value
 * @return {!proto.common.ContractTransaction} returns this
*/
proto.common.ContractTransaction.prototype.setContractId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ContractTransaction} returns this
 */
proto.common.ContractTransaction.prototype.clearContractId = function() {
  return this.setContractId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ContractTransaction.prototype.hasContractId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tx_id = 2;
 * @return {string}
 */
proto.common.ContractTransaction.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractTransaction} returns this
 */
proto.common.ContractTransaction.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    runtimeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    endorsePolicy: (f = msg.getEndorsePolicy()) && accesscontrol_policy_pb.Policy.toObject(includeInstance, f),
    updatePolicy: (f = msg.getUpdatePolicy()) && accesscontrol_policy_pb.Policy.toObject(includeInstance, f),
    createTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    creator: (f = msg.getCreator()) && accesscontrol_member_pb.SerializedMember.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && accesscontrol_member_pb.SerializedMember.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Contract}
 */
proto.common.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Contract;
  return proto.common.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Contract}
 */
proto.common.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.common.RuntimeType} */ (reader.readEnum());
      msg.setRuntimeType(value);
      break;
    case 4:
      var value = /** @type {!proto.common.ContractStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.common.ContractType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new accesscontrol_policy_pb.Policy;
      reader.readMessage(value,accesscontrol_policy_pb.Policy.deserializeBinaryFromReader);
      msg.setEndorsePolicy(value);
      break;
    case 7:
      var value = new accesscontrol_policy_pb.Policy;
      reader.readMessage(value,accesscontrol_policy_pb.Policy.deserializeBinaryFromReader);
      msg.setUpdatePolicy(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 9:
      var value = new accesscontrol_member_pb.SerializedMember;
      reader.readMessage(value,accesscontrol_member_pb.SerializedMember.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 10:
      var value = new accesscontrol_member_pb.SerializedMember;
      reader.readMessage(value,accesscontrol_member_pb.SerializedMember.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRuntimeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getEndorsePolicy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      accesscontrol_policy_pb.Policy.serializeBinaryToWriter
    );
  }
  f = message.getUpdatePolicy();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      accesscontrol_policy_pb.Policy.serializeBinaryToWriter
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      accesscontrol_member_pb.SerializedMember.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      accesscontrol_member_pb.SerializedMember.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.common.Contract.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.common.Contract.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RuntimeType runtime_type = 3;
 * @return {!proto.common.RuntimeType}
 */
proto.common.Contract.prototype.getRuntimeType = function() {
  return /** @type {!proto.common.RuntimeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.common.RuntimeType} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setRuntimeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ContractStatus status = 4;
 * @return {!proto.common.ContractStatus}
 */
proto.common.Contract.prototype.getStatus = function() {
  return /** @type {!proto.common.ContractStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.common.ContractStatus} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ContractType type = 5;
 * @return {!proto.common.ContractType}
 */
proto.common.Contract.prototype.getType = function() {
  return /** @type {!proto.common.ContractType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.common.ContractType} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional accesscontrol.Policy endorse_policy = 6;
 * @return {?proto.accesscontrol.Policy}
 */
proto.common.Contract.prototype.getEndorsePolicy = function() {
  return /** @type{?proto.accesscontrol.Policy} */ (
    jspb.Message.getWrapperField(this, accesscontrol_policy_pb.Policy, 6));
};


/**
 * @param {?proto.accesscontrol.Policy|undefined} value
 * @return {!proto.common.Contract} returns this
*/
proto.common.Contract.prototype.setEndorsePolicy = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.clearEndorsePolicy = function() {
  return this.setEndorsePolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Contract.prototype.hasEndorsePolicy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional accesscontrol.Policy update_policy = 7;
 * @return {?proto.accesscontrol.Policy}
 */
proto.common.Contract.prototype.getUpdatePolicy = function() {
  return /** @type{?proto.accesscontrol.Policy} */ (
    jspb.Message.getWrapperField(this, accesscontrol_policy_pb.Policy, 7));
};


/**
 * @param {?proto.accesscontrol.Policy|undefined} value
 * @return {!proto.common.Contract} returns this
*/
proto.common.Contract.prototype.setUpdatePolicy = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.clearUpdatePolicy = function() {
  return this.setUpdatePolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Contract.prototype.hasUpdatePolicy = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 create_time = 8;
 * @return {number}
 */
proto.common.Contract.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional accesscontrol.SerializedMember creator = 9;
 * @return {?proto.accesscontrol.SerializedMember}
 */
proto.common.Contract.prototype.getCreator = function() {
  return /** @type{?proto.accesscontrol.SerializedMember} */ (
    jspb.Message.getWrapperField(this, accesscontrol_member_pb.SerializedMember, 9));
};


/**
 * @param {?proto.accesscontrol.SerializedMember|undefined} value
 * @return {!proto.common.Contract} returns this
*/
proto.common.Contract.prototype.setCreator = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.clearCreator = function() {
  return this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Contract.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional accesscontrol.SerializedMember address = 10;
 * @return {?proto.accesscontrol.SerializedMember}
 */
proto.common.Contract.prototype.getAddress = function() {
  return /** @type{?proto.accesscontrol.SerializedMember} */ (
    jspb.Message.getWrapperField(this, accesscontrol_member_pb.SerializedMember, 10));
};


/**
 * @param {?proto.accesscontrol.SerializedMember|undefined} value
 * @return {!proto.common.Contract} returns this
*/
proto.common.Contract.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Contract} returns this
 */
proto.common.Contract.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Contract.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractList.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractList.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractsList: jspb.Message.toObjectList(msg.getContractsList(),
    proto.common.Contract.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractList}
 */
proto.common.ContractList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractList;
  return proto.common.ContractList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractList}
 */
proto.common.ContractList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Contract;
      reader.readMessage(value,proto.common.Contract.deserializeBinaryFromReader);
      msg.addContracts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contract contracts = 1;
 * @return {!Array<!proto.common.Contract>}
 */
proto.common.ContractList.prototype.getContractsList = function() {
  return /** @type{!Array<!proto.common.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.Contract, 1));
};


/**
 * @param {!Array<!proto.common.Contract>} value
 * @return {!proto.common.ContractList} returns this
*/
proto.common.ContractList.prototype.setContractsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Contract}
 */
proto.common.ContractList.prototype.addContracts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.Contract, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractList} returns this
 */
proto.common.ContractList.prototype.clearContractsList = function() {
  return this.setContractsList([]);
};


/**
 * @enum {number}
 */
proto.common.ContractName = {
  SYSTEM_CONTRACT_CHAIN_CONFIG: 0,
  SYSTEM_CONTRACT_QUERY: 1,
  SYSTEM_CONTRACT_CERT_MANAGE: 2,
  SYSTEM_CONTRACT_GOVERNANCE: 3,
  SYSTEM_CONTRACT_MULTI_SIGN: 4,
  SYSTEM_CONTRACT_STATE: 5,
  SYSTEM_CONTRACT_PRIVATE_COMPUTE: 6
};

/**
 * @enum {number}
 */
proto.common.QueryFunction = {
  GET_BLOCK_BY_TX_ID: 0,
  GET_CONTRACT_INFO: 1,
  GET_TX_BY_TX_ID: 2,
  GET_BLOCK_BY_HEIGHT: 3,
  GET_CHAIN_INFO: 4,
  GET_LAST_CONFIG_BLOCK: 5,
  GET_BLOCK_BY_HASH: 6,
  GET_NODE_CHAIN_LIST: 7,
  GET_GOVERNANCE_CONTRACT: 8,
  GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT: 9,
  GET_BLOCK_WITH_TXRWSETS_BY_HASH: 10,
  GET_LAST_BLOCK: 11,
  GET_FULL_BLOCK_BY_HEIGHT: 12,
  GET_BLOCK_HEIGHT_BY_TX_ID: 13,
  GET_BLOCK_HEIGHT_BY_HASH: 14,
  GET_BLOCK_HEADER_BY_HEIGHT: 15,
  GET_ARCHIVED_BLOCK_HEIGHT: 16,
  GET_CONTRACT_BYTECODE: 17,
  GET_ALL_CONTRACTS: 18
};

/**
 * @enum {number}
 */
proto.common.RuntimeType = {
  INVALID: 0,
  NATIVE: 1,
  WASMER: 2,
  WXVM: 3,
  GASM: 4,
  EVM: 5,
  DOCKER_GO: 6,
  DOCKER_JAVA: 7
};

/**
 * @enum {number}
 */
proto.common.ConfigFunction = {
  GET_CHAIN_CONFIG: 0,
  GET_CHAIN_CONFIG_AT: 1,
  CORE_UPDATE: 2,
  BLOCK_UPDATE: 3,
  TRUST_ROOT_ADD: 4,
  TRUST_ROOT_UPDATE: 5,
  TRUST_ROOT_DELETE: 6,
  NODE_ADDR_ADD: 7,
  NODE_ADDR_UPDATE: 8,
  NODE_ADDR_DELETE: 9,
  NODE_ORG_ADD: 10,
  NODE_ORG_UPDATE: 11,
  NODE_ORG_DELETE: 12,
  CONSENSUS_EXT_ADD: 13,
  CONSENSUS_EXT_UPDATE: 14,
  CONSENSUS_EXT_DELETE: 15,
  PERMISSION_ADD: 16,
  PERMISSION_UPDATE: 17,
  PERMISSION_DELETE: 18,
  NODE_ID_ADD: 19,
  NODE_ID_UPDATE: 20,
  NODE_ID_DELETE: 21
};

/**
 * @enum {number}
 */
proto.common.CertManageFunction = {
  CERT_ADD: 0,
  CERTS_DELETE: 1,
  CERTS_QUERY: 2,
  CERTS_FREEZE: 3,
  CERTS_UNFREEZE: 4,
  CERTS_REVOKE: 5
};

/**
 * @enum {number}
 */
proto.common.MultiSignFunction = {
  REQ: 0,
  VOTE: 1,
  QUERY: 2
};

/**
 * @enum {number}
 */
proto.common.ManageUserContractFunction = {
  INIT_CONTRACT: 0,
  UPGRADE_CONTRACT: 1,
  FREEZE_CONTRACT: 2,
  UNFREEZE_CONTRACT: 3,
  REVOKE_CONTRACT: 4
};

/**
 * @enum {number}
 */
proto.common.PrivateComputeContractFunction = {
  GET_CONTRACT: 0,
  GET_DATA: 1,
  SAVE_CA_CERT: 2,
  SAVE_DIR: 3,
  SAVE_DATA: 4,
  SAVE_CONTRACT: 5,
  SAVE_ENCLAVE_REPORT: 6,
  GET_ENCLAVE_PROOF: 7,
  GET_CA_CERT: 8,
  GET_DIR: 9,
  UPDATE_CONTRACT: 10,
  CHECK_CALLER_CERT_AUTH: 11,
  GET_ENCLAVE_ENCRYPT_PUB_KEY: 12,
  GET_ENCLAVE_VERIFICATION_PUB_KEY: 13,
  GET_ENCLAVE_REPORT: 14,
  GET_ENCLAVE_CHALLENGE: 15,
  GET_ENCLAVE_SIGNATURE: 16,
  SAVE_REMOTE_ATTESTATION: 17
};

/**
 * @enum {number}
 */
proto.common.ContractStatus = {
  UNKNOWN: 0,
  NORMAL: 1,
  FROZEN: 2,
  REVOKED: 3
};

/**
 * @enum {number}
 */
proto.common.ContractType = {
  PARALLEL: 0,
  SERIAL: 1,
  ENDORSE: 2,
  SINGLE: 4
};

goog.object.extend(exports, proto.common);
