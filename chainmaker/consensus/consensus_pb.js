// source: consensus/consensus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_block_pb = require('../common/block_pb.js');
goog.object.extend(proto, common_block_pb);
var common_rwset_pb = require('../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
goog.exportSymbol('proto.consensus.BlockHeaderConsensusArgs', null, global);
goog.exportSymbol('proto.consensus.ConsensusType', null, global);
goog.exportSymbol('proto.consensus.GovernanceContract', null, global);
goog.exportSymbol('proto.consensus.GovernanceMember', null, global);
goog.exportSymbol('proto.consensus.VerifyResult', null, global);
goog.exportSymbol('proto.consensus.VerifyResult.Code', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.VerifyResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.VerifyResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.VerifyResult.displayName = 'proto.consensus.VerifyResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.BlockHeaderConsensusArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.BlockHeaderConsensusArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.BlockHeaderConsensusArgs.displayName = 'proto.consensus.BlockHeaderConsensusArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.GovernanceMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.GovernanceMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.GovernanceMember.displayName = 'proto.consensus.GovernanceMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.GovernanceContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.consensus.GovernanceContract.repeatedFields_, null);
};
goog.inherits(proto.consensus.GovernanceContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.GovernanceContract.displayName = 'proto.consensus.GovernanceContract';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.VerifyResult.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.VerifyResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.VerifyResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VerifyResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    verifiedBlock: (f = msg.getVerifiedBlock()) && common_block_pb.Block.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.VerifyResult}
 */
proto.consensus.VerifyResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.VerifyResult;
  return proto.consensus.VerifyResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.VerifyResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.VerifyResult}
 */
proto.consensus.VerifyResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setVerifiedBlock(value);
      break;
    case 2:
      var value = /** @type {!proto.consensus.VerifyResult.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.VerifyResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.VerifyResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.VerifyResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VerifyResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerifiedBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.consensus.VerifyResult.Code = {
  SUCCESS: 0,
  FAIL: 1
};

/**
 * optional common.Block verified_block = 1;
 * @return {?proto.common.Block}
 */
proto.consensus.VerifyResult.prototype.getVerifiedBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.consensus.VerifyResult} returns this
*/
proto.consensus.VerifyResult.prototype.setVerifiedBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.clearVerifiedBlock = function() {
  return this.setVerifiedBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.VerifyResult.prototype.hasVerifiedBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Code code = 2;
 * @return {!proto.consensus.VerifyResult.Code}
 */
proto.consensus.VerifyResult.prototype.getCode = function() {
  return /** @type {!proto.consensus.VerifyResult.Code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.consensus.VerifyResult.Code} value
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.consensus.VerifyResult.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.BlockHeaderConsensusArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.BlockHeaderConsensusArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.BlockHeaderConsensusArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensustype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    consensusdata: (f = msg.getConsensusdata()) && common_rwset_pb.TxRWSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.BlockHeaderConsensusArgs}
 */
proto.consensus.BlockHeaderConsensusArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.BlockHeaderConsensusArgs;
  return proto.consensus.BlockHeaderConsensusArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.BlockHeaderConsensusArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.BlockHeaderConsensusArgs}
 */
proto.consensus.BlockHeaderConsensusArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConsensustype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLevel(value);
      break;
    case 5:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.setConsensusdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.BlockHeaderConsensusArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.BlockHeaderConsensusArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.BlockHeaderConsensusArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensustype();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getConsensusdata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 ConsensusType = 1;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getConsensustype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setConsensustype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Round = 3;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Level = 4;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional common.TxRWSet ConsensusData = 5;
 * @return {?proto.common.TxRWSet}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getConsensusdata = function() {
  return /** @type{?proto.common.TxRWSet} */ (
    jspb.Message.getWrapperField(this, common_rwset_pb.TxRWSet, 5));
};


/**
 * @param {?proto.common.TxRWSet|undefined} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
*/
proto.consensus.BlockHeaderConsensusArgs.prototype.setConsensusdata = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.clearConsensusdata = function() {
  return this.setConsensusdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.hasConsensusdata = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.GovernanceMember.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.GovernanceMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.GovernanceMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.GovernanceMember;
  return proto.consensus.GovernanceMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.GovernanceMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.GovernanceMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.GovernanceMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.GovernanceMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string NodeID = 1;
 * @return {string}
 */
proto.consensus.GovernanceMember.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.consensus.GovernanceMember} returns this
 */
proto.consensus.GovernanceMember.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 Index = 2;
 * @return {number}
 */
proto.consensus.GovernanceMember.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceMember} returns this
 */
proto.consensus.GovernanceMember.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.consensus.GovernanceContract.repeatedFields_ = [15,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.GovernanceContract.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.GovernanceContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.GovernanceContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    curmaxindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skiptimeoutcommit: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    configsequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    n: jspb.Message.getFieldWithDefault(msg, 7, 0),
    minquorumforqc: jspb.Message.getFieldWithDefault(msg, 8, 0),
    cachedlen: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nextswitchheight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    transitblock: jspb.Message.getFieldWithDefault(msg, 11, 0),
    blocknumperepoch: jspb.Message.getFieldWithDefault(msg, 12, 0),
    validatornum: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nodeproposeround: jspb.Message.getFieldWithDefault(msg, 14, 0),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    nextvalidatorsList: jspb.Message.toObjectList(msg.getNextvalidatorsList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    lastminquorumforqc: jspb.Message.getFieldWithDefault(msg, 18, 0),
    hotstuffroundtimeoutmill: jspb.Message.getFieldWithDefault(msg, 19, 0),
    hotstuffroundtimeoutintervalmill: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.GovernanceContract}
 */
proto.consensus.GovernanceContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.GovernanceContract;
  return proto.consensus.GovernanceContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.GovernanceContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.GovernanceContract}
 */
proto.consensus.GovernanceContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochid(value);
      break;
    case 2:
      var value = /** @type {!proto.consensus.ConsensusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurmaxindex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkiptimeoutcommit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigsequence(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setN(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinquorumforqc(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCachedlen(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextswitchheight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransitblock(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumperepoch(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatornum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeproposeround(value);
      break;
    case 15:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 16:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 17:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addNextvalidators(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastminquorumforqc(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHotstuffroundtimeoutmill(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHotstuffroundtimeoutintervalmill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.GovernanceContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.GovernanceContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.GovernanceContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurmaxindex();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSkiptimeoutcommit();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getConfigsequence();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getN();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMinquorumforqc();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getCachedlen();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getNextswitchheight();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getTransitblock();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getBlocknumperepoch();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getValidatornum();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getNodeproposeround();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getNextvalidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getLastminquorumforqc();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getHotstuffroundtimeoutmill();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getHotstuffroundtimeoutintervalmill();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
};


/**
 * optional uint64 EpochId = 1;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getEpochid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setEpochid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ConsensusType Type = 2;
 * @return {!proto.consensus.ConsensusType}
 */
proto.consensus.GovernanceContract.prototype.getType = function() {
  return /** @type {!proto.consensus.ConsensusType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.consensus.ConsensusType} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 CurMaxIndex = 3;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getCurmaxindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setCurmaxindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool SkipTimeoutCommit = 4;
 * @return {boolean}
 */
proto.consensus.GovernanceContract.prototype.getSkiptimeoutcommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setSkiptimeoutcommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 ConfigSequence = 6;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getConfigsequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setConfigsequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 N = 7;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 MinQuorumForQc = 8;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getMinquorumforqc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setMinquorumforqc = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 CachedLen = 9;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getCachedlen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setCachedlen = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 NextSwitchHeight = 10;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getNextswitchheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setNextswitchheight = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 TransitBlock = 11;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getTransitblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setTransitblock = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 BlockNumPerEpoch = 12;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getBlocknumperepoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setBlocknumperepoch = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 ValidatorNum = 13;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getValidatornum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setValidatornum = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 NodeProposeRound = 14;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getNodeproposeround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setNodeproposeround = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated GovernanceMember Members = 15;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 15));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * repeated GovernanceMember Validators = 16;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 16));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * repeated GovernanceMember NextValidators = 17;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getNextvalidatorsList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 17));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setNextvalidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addNextvalidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearNextvalidatorsList = function() {
  return this.setNextvalidatorsList([]);
};


/**
 * optional uint64 LastMinQuorumForQc = 18;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getLastminquorumforqc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setLastminquorumforqc = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 HotstuffRoundTimeoutMill = 19;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getHotstuffroundtimeoutmill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setHotstuffroundtimeoutmill = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 HotstuffRoundTimeoutIntervalMill = 20;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getHotstuffroundtimeoutintervalmill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setHotstuffroundtimeoutintervalmill = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * @enum {number}
 */
proto.consensus.ConsensusType = {
  SOLO: 0,
  TBFT: 1,
  MBFT: 2,
  HOTSTUFF: 3,
  RAFT: 4,
  POW: 10
};

goog.object.extend(exports, proto.consensus);
