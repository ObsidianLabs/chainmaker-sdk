/*
Copyright (C) BABEC. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option java_package = "org.chainmaker.pb.api";
option go_package = "chainmaker.org/chainmaker-go/pb/protogo/api";

package api;

// rpcNnode is the server API for
service RpcNode {
	// processing transaction message requests
	rpc SendRequest(TxRequest) returns (TxResponse) {};

	// processing requests for message subscription
	rpc Subscribe(TxRequest) returns (stream SubscribeResult) {};

	// update debug status (development debugging)
	// rpc UpdateDebugConfig(config.DebugConfigRequest) returns (config.DebugConfigResponse) {};

	// // refreshLogLevelsConfig
	// rpc RefreshLogLevelsConfig(config.LogLevelsRequest) returns (config.LogLevelsResponse) {};

	// // get chainmaker version
	// rpc GetChainMakerVersion(config.ChainMakerVersionRequest) returns(config.ChainMakerVersionResponse) {};

	// // check chain configuration and load new chain dynamically
	// rpc CheckNewBlockChainConfig(config.CheckNewBlockChainConfigRequest) returns (config.CheckNewBlockChainConfigResponse) {};
}

message SerializedMember {
	// organization identifier of the member
	string org_id = 1;

	// member identity related info bytes
	bytes member_info = 2;

	// use cert compression
	// todo: is_full_cert -> compressed
	bool is_full_cert = 3;
}

enum TxType {
  // call a pre created user contract, tx included in block
  INVOKE_USER_CONTRACT = 0;

  // query a pre-created user contract, tx not included in block
  QUERY_USER_CONTRACT = 1;

  // create, upgrade, freeze, unfreeze, revoke a user contract, tx included in block
  MANAGE_USER_CONTRACT = 2;

  // call a system contract, tx included in block
  INVOKE_SYSTEM_CONTRACT = 7;

  // query a system contract, tx not included in block
  QUERY_SYSTEM_CONTRACT = 3;

  // update chain config, tx included in block
  UPDATE_CHAIN_CONFIG = 4;

  // subscribe block info, tx not included in block
  SUBSCRIBE_BLOCK_INFO = 5;

  // subscribe tx info, tx not included in block
  SUBSCRIBE_TX_INFO = 6;

  //subscribe contract event info, tx not included in block
  SUBSCRIBE_CONTRACT_EVENT_INFO = 8;

  // archive block
  ARCHIVE_FULL_BLOCK = 9;

  // restore archived block
  RESTORE_FULL_BLOCK = 10;
}

message TxHeader {
  // blockchain identifier
  string chain_id = 1;

  // sender identifier
  SerializedMember sender = 2;

  // transaction type
  TxType tx_type = 3;

  // transaction id set by sender, should be unique
  string tx_id = 4;

  // transaction timestamp, in unix timestamp format, seconds
  int64 timestamp = 5;

  // expiration timestamp in unix timestamp format
  // after that the transaction is invalid if it is not included in block yet
  int64 expiration_time = 6;
}

message TxRequest {
  // header of the request
  TxHeader header = 1;

  // payload of the request, can be unmarshalled according to tx_type in header
  bytes payload = 2;

  // signature of [header bytes || payload bytes]
  bytes signature = 3;
}

enum TxStatusCode {
  SUCCESS = 0;
  TIMEOUT = 1;
  INVALID_PARAMETER = 2;
  NO_PERMISSION = 3;
  CONTRACT_FAIL = 4;
  INTERNAL_ERROR = 5;

  INVALID_CONTRACT_TRANSACTION_TYPE = 10;
  INVALID_CONTRACT_PARAMETER_CONTRACT_NAME = 11;
  INVALID_CONTRACT_PARAMETER_METHOD = 12;
  INVALID_CONTRACT_PARAMETER_INIT_METHOD = 13;
  INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD = 14;
  INVALID_CONTRACT_PARAMETER_BYTE_CODE = 15;
  INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE = 16;
  INVALID_CONTRACT_PARAMETER_VERSION = 17;

  GET_FROM_TX_CONTEXT_FAILED = 20;
  PUT_INTO_TX_CONTEXT_FAILED = 21;
  CONTRACT_VERSION_EXIST_FAILED = 22;
  CONTRACT_VERSION_NOT_EXIST_FAILED = 23;
  CONTRACT_BYTE_CODE_NOT_EXIST_FAILED = 24;
  MARSHAL_SENDER_FAILED = 25;
  INVOKE_INIT_METHOD_FAILED = 26;
  INVOKE_UPGRADE_METHOD_FAILED = 27;
  CREATE_RUNTIME_INSTANCE_FAILED = 28;
  UNMARSHAL_CREATOR_FAILED = 29;
  UNMARSHAL_SENDER_FAILED = 30;
  GET_SENDER_PK_FAILED = 31;
  GET_CREATOR_PK_FAILED = 32;
  GET_CREATOR_FAILED = 33;
  GET_CREATOR_CERT_FAILED = 34;
  GET_SENDER_CERT_FAILED = 35;
  CONTRACT_FREEZE_FAILED = 36;
  CONTRACT_TOO_DEEP_FAILED = 37;
  CONTRACT_REVOKE_FAILED = 38;
  CONTRACT_INVOKE_METHOD_FAILED = 39;

  ARCHIVED_TX = 40;
  ARCHIVED_BLOCK = 41;
}

enum ContractResultCode {
  OK = 0;
  FAIL = 1;
}

message ContractEvent {
  string topic = 1;
  string tx_id = 2;
  string contract_name = 3;
  string contract_version = 4;
  repeated string event_data = 5;
}

message ContractResult {
  // user contract defined return code, 0-ok, 1-error. for example, insufficient balance in token transfer
  ContractResultCode code = 1;
  // user contract defined result
  bytes result = 2;
  // user contract defined result message
  string message = 3;
  // gas used by current contract(include contract call)
  int64 gas_used = 4;
  // contract events
  repeated ContractEvent contract_event = 5;
}

message TxResponse {
  // response code
  TxStatusCode code = 1;
  // response message
  string message = 2;
  // returned data, set in smart contract
  ContractResult contract_result = 3;
}

message SubscribeResult {
  // when TxType == SUBSCRIBE_BLOCK_INFO, data type is pb.BlockInfo;
  // when TxType == SUBSCRIBE_TX_INFOï¼Œdata type is pb.Transaction.
  bytes data = 1;
}