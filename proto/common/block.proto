/*
Copyright (C) BABEC. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option java_package = "org.chainmaker.pb.common";
option java_outer_classname = "ChainmakerBlock";
option go_package = "chainmaker.org/chainmaker-go/pb/protogo/common";

package common;

import "common/transaction.proto";
import "common/rwset.proto";

// Block definition
message Block {
    // header of the block
    BlockHeader header = 1;

    // execution sequence of intra block transactions is generated by proposer
    DAG dag = 2; // 本块交易的DAG
    repeated Transaction txs = 3;

    // stores the voting information of the current block
    // not included in block hash value calculation
    AdditionalData additional_data = 4;
}

// block information
message BlockInfo {
    // block
    Block block = 1;

    // The read / write set list corresponding to the transaction contained in the block
    repeated TxRWSet rwset_list = 2;
}

// block additional data
message AdditionalData {
    // extra data, with map type, excluded in hash calculation
    map<string, bytes> extra_data = 1;
}

// header of the block
message BlockHeader {
    // blockchain identifier
    string chain_id = 1;

    // block height
    int64 block_height = 2;

    // previous block hash
    bytes pre_block_hash = 3;

    // block hash (block identifier)
    bytes block_hash = 4; // 本块哈希（块标识），除block_hash和signature以外，其余字段参与block_hash计算

    // previous config block height, used to trace anc check if chain config is valid
    int64 pre_conf_height = 5;

    // block version
    bytes block_version = 6;

    // Save the DAG feature summary, and hash the DAG after Pb serialization
    // hash of serialized DAG
    bytes dag_hash = 7;

    // The root hash of Merkle tree generated by read_write_set_digest in the result of each transaction in the block
    // used to verify the read-write set of the block
    bytes rw_set_root = 8;

    // merkle root of transactions
    // used to verify the existence of this transactions
    bytes tx_root = 9;

    // the time stamp of the block
    int64 block_timestamp = 10;

    // proposal node identifier
    bytes proposer = 11;

    // consensus parameters
    // used to store information include in block hash calculation
    bytes consensus_args = 12;

    // count of transactions
    int64 tx_count = 13;

    // signature of proposer
    bytes signature = 14;
}

// transaction execution sequence
// Using adjacency table storage
message DAG {
    // Neighbor node: related party transactions with reading and writing conflicts
    message Neighbor {
        repeated int32 neighbors = 1;
    }

    // sequence number of transaction topological sort
    //the sequence number of the transaction topological sort associated with the transaction
    repeated Neighbor vertexes = 2;
}
